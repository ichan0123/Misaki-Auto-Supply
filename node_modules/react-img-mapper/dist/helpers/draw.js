"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
var drawRect = function (area, ctx) {
    var scaledCoords = area.scaledCoords, fillColor = area.fillColor, lineWidth = area.lineWidth, strokeColor = area.strokeColor;
    var left = scaledCoords[0], top = scaledCoords[1], right = scaledCoords[2], bottom = scaledCoords[3];
    ctx.current.fillStyle = fillColor;
    ctx.current.lineWidth = lineWidth;
    ctx.current.strokeStyle = strokeColor;
    ctx.current.strokeRect(left, top, right - left, bottom - top);
    ctx.current.fillRect(left, top, right - left, bottom - top);
    return true;
};
var drawCircle = function (area, ctx) {
    var scaledCoords = area.scaledCoords, fillColor = area.fillColor, lineWidth = area.lineWidth, strokeColor = area.strokeColor;
    var left = scaledCoords[0], top = scaledCoords[1], right = scaledCoords[2];
    ctx.current.fillStyle = fillColor;
    ctx.current.beginPath();
    ctx.current.lineWidth = lineWidth;
    ctx.current.strokeStyle = strokeColor;
    ctx.current.arc(left, top, right, 0, 2 * Math.PI);
    ctx.current.closePath();
    ctx.current.stroke();
    ctx.current.fill();
    return true;
};
var drawPoly = function (area, ctx) {
    var scaledCoords = area.scaledCoords, fillColor = area.fillColor, lineWidth = area.lineWidth, strokeColor = area.strokeColor;
    var groupCoords = scaledCoords.reduce(function (acc, val, index, array) {
        if (index % 2)
            return acc;
        return __spreadArray(__spreadArray([], acc, true), [array.slice(index, index + 2)], false);
    }, []);
    // const first = groupCoords.unshift();
    ctx.current.fillStyle = fillColor;
    ctx.current.beginPath();
    ctx.current.lineWidth = lineWidth;
    ctx.current.strokeStyle = strokeColor;
    // ctx.current.moveTo(first[0], first[1]);
    groupCoords.forEach(function (_a) {
        var first = _a[0], second = _a[1];
        return ctx.current.lineTo(first, second);
    });
    ctx.current.closePath();
    ctx.current.stroke();
    ctx.current.fill();
    return true;
};
var getShape = function (shape) {
    if (shape === 'rect')
        return drawRect;
    if (shape === 'circle')
        return drawCircle;
    if (shape === 'poly')
        return drawPoly;
    return false;
};
var drawShape = function (area, ctx) {
    var shape = area.shape, restArea = __rest(area, ["shape"]);
    var shapeFn = getShape(shape);
    if (shapeFn && ctx.current instanceof CanvasRenderingContext2D) {
        var currentCtx = { current: ctx.current };
        return shapeFn(restArea, currentCtx);
    }
    return false;
};
exports.default = drawShape;
