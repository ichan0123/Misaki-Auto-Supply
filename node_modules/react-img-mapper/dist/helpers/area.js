"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getExtendedArea = void 0;
var dimensions_1 = require("./dimensions");
var scaleCoords = function (coords, _a) {
    var width = _a.width, height = _a.height, img = _a.img, responsive = _a.responsive, parentWidth = _a.parentWidth, imgWidth = _a.imgWidth;
    return coords.map(function (coord) {
        if (responsive && parentWidth && img.current) {
            return coord / (img.current.naturalWidth / parentWidth);
        }
        var imageWidth = (0, dimensions_1.getPropDimension)({ width: width, height: height, img: img }).width;
        var scale = imageWidth && imgWidth > 0 ? imageWidth / imgWidth : 1;
        return coord * scale;
    });
};
var computeCenter = function (shape, scaledCoords) {
    switch (shape) {
        case 'circle':
            return [scaledCoords[0], scaledCoords[1]];
        case 'poly':
        case 'rect':
        default: {
            var n_1 = scaledCoords.length / 2;
            var _a = scaledCoords.reduce(function (_a, val, idx) {
                var y = _a.y, x = _a.x;
                return (!(idx % 2) ? { y: y, x: x + val / n_1 } : { y: y + val / n_1, x: x });
            }, { y: 0, x: 0 }), scaleY = _a.y, scaleX = _a.x;
            return [scaleX, scaleY];
        }
    }
};
var getExtendedArea = function (area, scaleCoordsParams, _a) {
    var _b, _c, _d, _e;
    var fillColor = _a.fillColor, lineWidth = _a.lineWidth, strokeColor = _a.strokeColor;
    var scaledCoords = scaleCoords(area.coords, scaleCoordsParams);
    var center = computeCenter(area.shape, scaledCoords);
    return __assign(__assign({}, area), { scaledCoords: scaledCoords, center: center, active: (_b = area.active) !== null && _b !== void 0 ? _b : true, fillColor: (_c = area.fillColor) !== null && _c !== void 0 ? _c : fillColor, lineWidth: (_d = area.lineWidth) !== null && _d !== void 0 ? _d : lineWidth, strokeColor: (_e = area.strokeColor) !== null && _e !== void 0 ? _e : strokeColor });
};
exports.getExtendedArea = getExtendedArea;
